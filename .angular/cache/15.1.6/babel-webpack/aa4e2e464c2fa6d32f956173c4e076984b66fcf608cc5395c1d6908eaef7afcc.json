{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet ConsultarprovComponent = class ConsultarprovComponent {\n  constructor(ServiceProveedor) {\n    this.ServiceProveedor = ServiceProveedor;\n    this.proveedores = [];\n    this.proveedor = {\n      codigo: '',\n      nombre: '',\n      direccion: '',\n      telefono: '',\n      correo: ''\n    };\n  }\n  consultarPro() {\n    this.ServiceProveedor.consultar(this.proveedor.codigo).subscribe(res => {\n      this.ServiceProveedor.proveedor.codigo = res.proveedor.codigo;\n      this.ServiceProveedor.proveedor.nombre = res.proveedor.nombre;\n      this.ServiceProveedor.proveedor.direccion = res.proveedor.direccion;\n      this.ServiceProveedor.proveedor.telefono = res.proveedor.telefono;\n      this.ServiceProveedor.proveedor.correo = res.proveedor.correo;\n    }, err => {\n      console.log(err);\n    });\n    this.limpiarServiceProv();\n  } //Cierre del metodo consultarEmp\n  modificarPro() {\n    this.ServiceProveedor.modificar(this.ServiceProveedor.proveedor).subscribe(res => {\n      alert('Proveedor modificado con éxito');\n      this.limpiarProv();\n      location.reload();\n    }, err => {\n      console.log(err);\n    });\n  } //Cierre del metodo modificarEmp\n  eliminarPro(codigo) {\n    this.ServiceProveedor.eliminar(codigo).subscribe(res => {\n      alert('Proveedor eliminado con éxito');\n      this.limpiarProv();\n      location.reload();\n    }, err => {\n      console.log(err);\n    });\n  } //Cierre del metodo eliminarEmp\n  limpiarProv() {\n    this.proveedor.codigo = '';\n    this.proveedor.nombre = '';\n    this.proveedor.direccion = '';\n    this.proveedor.telefono = '';\n    this.proveedor.correo = '';\n  } //Cierre del metodo limpiarEmp\n  limpiarServiceProv() {\n    this.ServiceProveedor.proveedor.codigo = '';\n    this.ServiceProveedor.proveedor.nombre = '';\n    this.ServiceProveedor.proveedor.direccion = '';\n    this.ServiceProveedor.proveedor.telefono = '';\n    this.ServiceProveedor.proveedor.correo = '';\n  } //Cierre del metodo limpiarEmp\n};\n\nConsultarprovComponent = __decorate([Injectable({\n  providedIn: 'root'\n})], ConsultarprovComponent);\nexport { ConsultarprovComponent };","map":{"version":3,"mappings":"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","names":["Injectable","ConsultarprovComponent","constructor","ServiceProveedor","codigo","nombre","direccion","telefono","correo","consultarPro","consultar","proveedor","subscribe","res","err","console","log","limpiarServiceProv","modificarPro","modificar","alert","limpiarProv","location","reload","eliminarPro","eliminar","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Daniel Marin\\Proyecto Angular\\netline\\src\\app\\services\\proveedores.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConsultarprovComponent {\n  constructor(public ServiceProveedor: ProveedoresService) {}\n  proveedores: any = [];\n  proveedor = {\n    codigo: '',\n    nombre: '',\n    direccion: '',\n    telefono: '',\n    correo: '',\n  };\n\n  consultarPro() {\n    this.ServiceProveedor.consultar(this.proveedor.codigo).subscribe(\n      (res) => {\n        this.ServiceProveedor.proveedor.codigo = res.proveedor.codigo;\n        this.ServiceProveedor.proveedor.nombre = res.proveedor.nombre;\n        this.ServiceProveedor.proveedor.direccion = res.proveedor.direccion;\n        this.ServiceProveedor.proveedor.telefono = res.proveedor.telefono;\n        this.ServiceProveedor.proveedor.correo = res.proveedor.correo;\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n    this.limpiarServiceProv();\n  } //Cierre del metodo consultarEmp\n\n  modificarPro() {\n    this.ServiceProveedor.modificar(this.ServiceProveedor.proveedor).subscribe(\n      (res) => {\n        alert('Proveedor modificado con éxito');\n        this.limpiarProv();\n        location.reload();\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  } //Cierre del metodo modificarEmp\n\n  eliminarPro(codigo: string) {\n    this.ServiceProveedor.eliminar(codigo).subscribe(\n      (res: any) => {\n        alert('Proveedor eliminado con éxito');\n        this.limpiarProv();\n        location.reload();\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  } //Cierre del metodo eliminarEmp\n\n  limpiarProv() {\n    this.proveedor.codigo = '';\n    this.proveedor.nombre = '';\n    this.proveedor.direccion = '';\n    this.proveedor.telefono = '';\n    this.proveedor.correo = '';\n  } //Cierre del metodo limpiarEmp\n\n  limpiarServiceProv() {\n    this.ServiceProveedor.proveedor.codigo = '';\n    this.ServiceProveedor.proveedor.nombre = '';\n    this.ServiceProveedor.proveedor.direccion = '';\n    this.ServiceProveedor.proveedor.telefono = '';\n    this.ServiceProveedor.proveedor.correo = '';\n  } //Cierre del metodo limpiarEmp\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}